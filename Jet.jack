class Jet {
    field int x, y;
    field int velocity;
    field int gravity;
    field int jumpForce;
    field Bullet bullet;

    constructor Jet new(int Ax, int Ay) {
        let x = Ax;
        let y = Ay;
        let velocity = 0;
        let gravity = 2;
        let jumpForce = -10;
        let bullet = null;
        do draw();
        return this;
    }

    method int getX() { return x; }
    method int getY() { return y; }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress, -30000);
        return;
    }

    method void erase() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress, 0);
        return;
    }

    /** Gravity-based movement */
    method void movement(int key) {
        do erase();

        if ((key = 131) | (key = 32)) { // Up Arrow or Spacebar (Jump)
            let velocity = jumpForce;
        }

        let velocity = velocity + gravity; // Apply gravity
        let y = y + velocity;

        if (y > 230) { // Prevent jet from falling below ground
            let y = 230;
            let velocity = 0;
        }
        if (y < 10) { // Prevent moving too high
            let y = 10;
            let velocity = 0;
        }

        do draw();
        return;
    }

    /** Shoot bullets */
    method void shoot() {
        if (bullet = null) { 
            let bullet = Bullet.new(x + 8, y - 5);
        }
        return;
    }

    /** Update bullets */
    method void updateBullet() {
        var int offScreen;
        if (~(bullet = null)) {
            do bullet.move();
            let offScreen = bullet.isOffScreen();
            if (offScreen) {
                do bullet.dispose();
                let bullet = null;
            }
        }
        return;
    }
}
